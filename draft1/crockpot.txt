int	detect_newline(char *str)
{
	int	i;

	i = -1;
	while(str[++i])
	{
		if (str[i] == '\n')
		{
			str[i] = '\0';
			return (1);
		}
	}
	return (0);
}

char	*ft_join(char *path, char *buffer)
{
	int		len;
	char	*ret_str;
	int		i;
	
	len = ft_strlen(path) + ft_strlen(buffer) + 1
	ret_str = (char *)ft_calloc(len, sizeof(char));
	while (*path)
	{
		ret_str[i] = *path;
		i++;
		path++;
	}
	free(path);
	while (*buffer)
	{
		ret_str[i] = *buffer;
		i++;
		buffer++;
	}

}

char	*get_path(int fd, char *which_path)
{
	char	*buffer;
	char	*path;
	int		i;

	buffer = ft_calloc(1025, sizeof(char));
	path = ft_calloc(1, sizeof(char));
	while (!detect_newline(buffer))
	{
		read(fd, buffer, 1024);
		path = ft_join(path, buffer);
		ft_bzero(buffer, 1024);
	}
	free(buffer);
	i = -1
	while (path[++i])
		if (path[i] == '\n')
			path[i] = '\0';
	return(path);
}

// void	exec_command(char **envp, )
// void	init_pipex(int file1, char *arg, char **envp, char * which_path)
// {
// 	int		fd[2];
// 	int		pid;
// 	// char	*path;
// 	// char	**args;

// 	if (pipe(fd) < 0)
// 		pipe_error();
// 	pid = fork();
// 	if (pid < 0)
// 		fork_error();
// 	else if (pid == 0)
// 	{
// 		printf("in the child process \n");
// 		close(fd[0]);
// 		dup2(file1, 0);
// 		dup2(fd[1], 1);
// 	}
// 	else
// 	{
// 		wait(NULL);
// 		printf("in parent process\n");
// 		char buffer[2000];
// 		close(fd[1]);
// 		read(fd[0], buffer, 2000);
// 		printf("%s\n", buffer);
// 		// dupe2(file2, fd[0]); //does this write to file2?
// 		// close(fd[0]);
// 	}
// }

// void	pipex(char *argc)
// {
// 	int	fd[2];
// 	int	pid;

// 	if (pipe(fd) < 0)
// 		pipe_error();
// 	pid = fork();
// 	if (pid < 0)
// 		fork_error();
// 	else if (pid == 0)
// 	{
// 		close(fd[0]);
// 		dupe2(file2, 0);
// 		dupe2(fd[1], 1);
// 		path = find_path(arg1, envp, which_path);
// 		args = ft_split(arg1, ' ');
// 		execve(path, args, envp);
// 	}
// 	else
// 	{
// 		wait(NULL);
// 		close(fd[1]);
// 		dupe2(file2, fd[0]); //does this write to file2?
// 		close(fd[0]);
// 	}
// }

// int main(int argv, char **argc, char **envp)
// {
// 	// int	i;
// 	// if (argc < 5)
// 	// 	arg_error();
// 	// init_pipex(argc[2]);
// 	// i = 3;
// 	// while (i < argv - 2)
// 	// {
// 	// 	pipex(argc[i]);
// 	// 	i++;
// 	// }
// 	(void)argv;
// 	int file1 = open(argc[1], O_RDONLY);
// 	char *which_path = return_which_path(envp);
// 	init_pipex(file1, argc[2], envp, which_path);
	
// 	// char buffer[2000];
// 	// read(fd, buffer, 2000);
// 	// printf("%s\n", buffer);
// }


while (i < m->num_commands)
	{
		//iterate through argc
		//create t_exec node
			//check path
			//check command
		//Current node = node;
		node = (t_exec *)ft_calloc(1, sizeof(t_exec));
		if (!node)
			//free m
			//exit
		node->commands = ft_split(argc[i], ' '); //check ft_split to see if everything gets freed during malloc error and returns NULL
		if (!node->commands)
			//free node;
			//free m and everything inside of m
			//error
		node->path = find_path(m, node->commands[0]);
		if (!node->path)
			//free node->commands
			//free node
			//free m and everything inside of m currently
			//error 
		node->next = NULL;
		if (!curr)
			curr = node;
		else
			curr->next = node;
	}

	char	*find_path(t_mlist *m, char *arg) //char **envp
{
	// int		pid;
	// int		fd[2];
	int		i;
	int		f;
	int		x;
	char	*path;

	// if (pipe(fd) < 0)
	// 	pipex_error(PIPE_ERR, m);
	// pid = fork();
	// if (pid < 0)
	// 	pipex_error(FORK_ERR, m);
	while (m->paths[i])
	{
		path = ft_strjoin_char(m->paths[i], arg, '/');
		f = access(path, F_OK);
		x = access(path, X_OK);
		if (f == 0 && x == 0)
			break;
		else if (f == 0 && x < 0)
			pipex_error(NO_PATH, m);
		free(path);
		i++;
	}
	if (f == 0 && x == 0)
		return (path);
	return (NULL);

	// else if (pid == 0)
	// {
	// 	close(fd[0]);
	// 	if (dup2(fd[1], 1) < 0)
	// 		pipex_error(DUP_ERR, m);
	// 	i = 0;
	// 	while(m->paths[i])
	// 	{
	// 		path = ft_strjoin_char(m->paths[i], arg, '/');
	// 		execve(path, arg, envp);
	// 		free(path);
	// 	}
	// 	pipex_error(EXEC_ERR, m);
	// }
	// else
	// {
	// 	wait(NULL);
	// 	close(fd[1]);
	// 	path = get_path(fd[0]);
	// 	close(fd[0]);
	// }
	// return (path);
}

// char	*get_path(int fd)
// {
// 	int		i;
// 	char	*path;

// 	path = get_next_line(fd);
// 	//if !path
// 		//exit
// 	i = -1;
// 	while(path[++i])
// 		if (path[i] == '\n')
// 			path[i] = '\0';
// 	return (path);
// }

// void	pipex(t_mlist *m, char **envp)
// {
// 	int	i;
// 	int	pid;
// 	int	fd[2];

// 	if (dup2(m->file1, STDIN_FILENO) < 0)
// 		pipex_error(DUP_ERR, m);
// 	close(m->file1);
// 	i = 0;
// 	while (i < m->num_commands)
// 	{
// 		if (pipe(fd) < 0)
// 			pipex_error(PIPE_ERR, m);
// 		pid = fork();
// 		if (pid < 0)
// 			pipex_error(FORK_ERR, m);
// 		else if (pid == 0)
// 		{
// 			printf("child process: %i\n", i);
// 			close(fd[0]);
// 			printf("PRINTING INPUT FILE: \n");
// 			print_file(STDIN_FILENO);
// 			if (i == m->num_commands - 1)
// 			{
// 				if (dup2(m->file2, STDOUT_FILENO) < 0)
// 					pipex_error(DUP_ERR, m);
// 			}
// 			else if (i < m->num_commands - 1)
// 			{
// 				if (dup2(fd[1], STDOUT_FILENO) < 0)
// 					pipex_error(DUP_ERR, m);
// 			}
// 			close(fd[1]);
// 			close(m->file1);
// 			close(m->file2);
// 			execve(m->exec_list[i].path, m->exec_list[i].commands, envp);
// 			pipex_error(EXEC_ERR, m);
// 		}
// 		else
// 		{
// 			wait(NULL);
// 			close(fd[1]);
// 			if (i != m->num_commands - 1)
// 			{
// 				if (dup2(fd[0], STDIN_FILENO) < 0)
// 					pipex_error(DUP_ERR, m);
// 			}
// 			close(fd[0]);
// 			printf("parent process: %i\n", i);
// 			printf("PRINTING STDIN: \n");
// 			print_file(STDIN_FILENO);
// 			i++;
// 		}
// 	}
// }

// void	pipex(t_mlist *m, char **envp)
// {
// 	int	i;
// 	int	j;
// 	int	pid[m->num_commands];
// 	int	fd[m->num_commands + 1][2];

// 	printf("entering pipex.. \n");
// 	i = 0;
// 	while (i < m->num_commands)
// 	{
// 		if (pipe(fd[i]) < 0)
// 			pipex_error(PIPE_ERR, m); //close all open pipes
// 		i++;
// 	}
// 	printf("pipes created\n");
// 	i = 0;
// 	while (i < m->num_commands)
// 	{
// 		pid[i] = fork();
// 		if (pid[i] < 0)
// 			pipex_error(FORK_ERR, m); //in this, close all fds as well 
// 		else if (pid[i] == 0) //child process
// 		{
// 			printf("entering child process \n");
// 			printf("%i\n", i);
// 			//close the pipes that aren't needed
// 			j = 0;
// 			while (j < m->num_commands + 1)
// 			{
// 				//close all pipes that aren't being used
// 				if (j != i)
// 					close(fd[j][0]); 
// 				if (j != i + 1) 
// 					close(fd[j][1]);
// 				j++;
// 			}
// 			printf("closed unused fds\n");
// 			if(dup2(fd[i][0], STDIN_FILENO) < 0) // process reads from prev pipe
// 			{
// 				pipex_error(DUP_ERR, m);
// 			}
// 			print_file(fd[i][0]);
// 			if (dup2(fd[i + 1][1], STDOUT_FILENO) < 0) // process writes to the next pipe (so next process can read from that pipe)
// 			{
// 				printf("error here\n");
// 				pipex_error(DUP_ERR, m);
// 			}
// 			close (fd[i][0]); //can I dup first and then close all fds? try this later
// 			close(fd[i + 1][0]);
// 			execve(m->exec_list[i].path, m->exec_list[i].commands, envp); //breaks out of child process before forking again
// 		}
// 		i++;

// 	}
// 	//parent process/main process
// 	//read from last pipe and transfer to file2
// 	if (dup2(m->file1, fd[0][1]) < 0)
// 		pipex_error(DUP_ERR, m);
// 	close(m->file1);
// 	print_file(fd[m->num_commands][0]);
// 	// if (dup2(m->file2, fd[m->num_commands][0]) < 0)
// 	// 	pipex_error(DUP_ERR, m);
// 	i = 0;
// 	while (i < m->num_commands)
// 	{
// 		// waitpid(pid[i], NULL, 0);
// 		wait(NULL);
// 		i++;
// 	}
// 	//close all pipes
// 	j = 0;
// 	while (j < m->num_commands + 1)
// 	{
// 		//close all pipes that aren't being used
// 		close(fd[j][0]);  
// 		close(fd[j][1]);
// 		j++;
// 	}
// 	close(m->file2);
// }

// char	*here_doc(char *limiter)
// {
// 	char	*temp;
// 	char	*str;
// 	char	*new_str;
// 	int		lim_len;

// 	str = NULL;
// 	temp = NULL;
// 	new_str = NULL;
// 	lim_len = ft_strlen(limiter); 
// 	while (1)
// 	{
// 		temp = get_next_line(STDIN_FILENO);
// 		if (ft_strncmp(temp, limiter, lim_len) == 0)
// 			break;
// 		if (!str)
// 		{
// 			str = (char *)ft_calloc(ft_strlen(temp) + 1, sizeof(char));
// 			// if (!str)
// 			// 	//error
// 			ft_strlcpy(str, temp, ft_strlen(temp) + 1);
// 			free(temp);
// 		}
// 		else 
// 		{
// 			new_str = ft_strjoin(str, temp);
// 			free (str);
// 			free (temp);
// 			str = new_str; 
// 		}
// 	}
// 	free(temp);
// 	return (str);
// }

// void	here_doc(t_mlist *m)
// {
// 	int	fd[2];
// 	int	pid;
// 	int	lim_len;
// 	char	*line;

// 	if (pipe(fd) == -1)
// 		pipex_error(PIPE_ERR, m);
// 	pid = fork();
// 	if (pid == -1)
// 		pipex_error(FORK_ERR, m);
// 	else if (pid == 0)
// 	{
// 		lim_len = ft_strlen(m->limiter); 
// 		close(fd[0]);
// 		while (1)
// 		{
// 			line = get_next_line(STDIN_FILENO);
// 			if (ft_strncmp(line, m->limiter, lim_len) == 0)
// 			{
// 				free(line);
// 				close(fd[1]); //do i close this or keep it open?
// 				return ;
// 			}
// 			write(fd[1], line, ft_strlen(line));
// 			free(line);
// 		}
// 	}
// 	close(fd[1]);
// 	dup2(fd[0], STDIN_FILENO);
// 	waitpid(pid, NULL, 0);
// }

// void	send_here_doc(t_mlist *m)
// {
// 	int		fd[2];
// 	int		pid;
// 	char	*input;

// 	if (pipe(fd) == -1)
// 		pipex_error(PIPE_ERR, m);
// 	pid = fork();
// 	if (pid == -1)
// 		pipex_error(FORK_ERR, m);
// 	else if (pid == 0)
// 	{
// 		close(fd[0]);
// 		input = here_doc(m->limiter);
// 		write(fd[1], input, ft_strlen(input) + 1); //check get next line again because each line has a null ending
// 		close(fd[1]);
// 		return;
// 	}
// 	close(fd[1]);
// 	dup2(fd[0], STDIN_FILENO);
// 	close(fd[0]);
// 	return ;

// }

// int	here_doc(t_mlist *m)
// {
// 	int	fd[2];
// 	int	lim_len;
// 	char	*line;

// 	if (pipe(fd) == -1)
// 		pipex_error(PIPE_ERR, m);
// 	lim_len = ft_strlen(m->limiter); 
// 	while (1)
// 	{
// 		line = get_next_line(STDIN_FILENO);
// 		if (ft_strncmp(line, m->limiter, lim_len) == 0)
// 		{
// 			free(line);
// 			close(fd[1]); //do i close this or keep it open?
// 		}
// 		write(fd[1], line, ft_strlen(line));
// 		free(line);
// 	}
// 	return (fd[0]);
// }

//send str to an fd 

// void	child_process(int i, int (*fd)[2], t_mlist *m, char **envp)
// {
// 	int	j;

// 	if (i == 0)
// 	{
// 		printf("%i\n", i);
// 		if (dup2(fd[i][1], STDOUT_FILENO) == -1)
// 			pipex_error(DUP_ERR, m, NULL);
// 		printf("FD:\n");
// 		print_file(fd[i][1]);
// 		printf("STDOUT:\n");
// 		print_file(STDOUT_FILENO);
// 	}
// 	if (i > 0)
// 	{
// 		printf("%i\n", i);
// 		if (dup2(fd[i - 1][0], STDIN_FILENO) == -1)
// 			pipex_error(DUP_ERR, m, NULL);
// 		printf("FD:\n");
// 		print_file(fd[i - 1][0]);
// 		printf("STDIN:\n");
// 		print_file(STDIN_FILENO);
// 	}
// 	if (i == m->num_cmds - 1)
// 	{
// 		printf("%i\n", i);
// 		if (dup2(m->file2, STDOUT_FILENO) == -1)
// 			pipex_error(DUP_ERR, m, NULL);
// 		printf("file2:\n");
// 		print_file(m->file2);
// 		printf("STDOUT:\n");
// 		print_file(STDOUT_FILENO);
// 	}
// 	if (i != m->num_cmds - 1 && i > 0)
// 	{
// 		printf("%i\n", i);
// 		if (dup2(fd[i][1], STDOUT_FILENO) == -1)
// 			pipex_error(DUP_ERR, m, NULL);
// 		printf("FD:\n");
// 		print_file(fd[i][1]);
// 		printf("STDOUT:\n");
// 		print_file(STDOUT_FILENO);
// 	}
// 	j = 0;
// 	while (j < m->num_cmds - 1)
// 	{
// 		close(fd[j][0]);
// 		close(fd[j][1]);
// 		j++;
// 	}
// 	execve(m->exec_list[i].path, m->exec_list[i].commands, envp);
// 	pipex_error(EXEC_ERR, m, NULL);
// }

// void	find_type(char *command, t_exec *exec_list, t_mlist *m, int i, char **envp)
// {
// 	char **primary_com;
// 	char *type_str;
// 	char *type_args;
// 	(void)envp;
// 	(void)i;

// 	primary_com = ft_split(command, ' ');
// 	print_splitlist(primary_com);
// 	if (!primary_com)
// 		pipex_error(MALLOC_ERR, m, NULL);
// 	type_str = ft_strjoin_char("type", primary_com[0], ' '); 
// 	printf("type str: %s\n", type_str);
// 	type_args = ft_strjoin_char("sh,-c", type_str, ',');
// 	printf("type_args: %s\n", type_args);
// 	if (!type_str || !type_args)
// 		pipex_error(MALLOC_ERR, m, NULL);
// 	exec_list[i].type_commands = ft_split(type_args, ',');
// 	// // print_splitlist(m->exec_list[i].type_commands);
// 	// if (!m->exec_list[i].type_commands)
// 	// 	pipex_error(MALLOC_ERR, m, NULL);
// 	free(type_str);
// 	free(type_args);
// 	free(primary_com);
// 	// printf("sh path: %s\n", m->sh_path);
// 	// print_splitlist(m->exec_list[i].type_commands);
// 	// execve(m->sh_path, m->exec_list[i].type_commands, envp);
// 	// pipex_error(EXEC_ERR, m, NULL);
// }


// int	check_builtin(int *fd, t_mlist *m)
// {
// 	char *buf;

// 	close(fd[1]);
// 	buf = (char *)ft_calloc(1001, sizeof(char));
// 	if (!buf)
// 		pipex_error(MALLOC_ERR, m, NULL);
// 	read(fd[0], buf, 1000);
// 	close(fd[0]);
// 	printf("buf: %s\n", buf);
// 	if (ft_strnstr(buf, "builtin", ft_strlen(buf) + 1) == NULL)
// 	{
// 		free(buf);
// 		return (0);
// 	}
// 	free(buf);
// 	return (1);
// }

// void	parent_process(int (*fd)[2], int *pid, t_mlist *m)
// {
// 	int	i;

// 	i = 0;
// 	while (i < m->num_cmds - 1)
// 	{
// 		close(fd[i][0]);
// 		close(fd[i][1]);
// 		i++;
// 	}
// 	i = 0;
// 	while (i < m->num_cmds)
// 	{
// 		waitpid(pid[i], NULL, 0);
// 		i++;
// 	}
// }

// void	pipex(t_mlist *m, char **envp)
// {
// 	int	fd[m->num_cmds - 1][2];
// 	int	pid[m->num_cmds];
// 	int	i;

// 	if (dup2(m->file1, STDIN_FILENO) == -1)
// 		pipex_error(DUP_ERR, m, NULL);
// 	if (close(m->file1) == -1)
// 		pipex_error(CLOSE_ERR, m, NULL);
// 	i = -1;
// 	while (++i < m->num_cmds - 1)
// 		if (pipe(fd[i]) == -1)
// 			pipex_error(PIPE_ERR, m, NULL);
// 	i = -1;
// 	while (++i < m->num_cmds)
// 	{
// 		pid[i] = fork();
// 		if (pid[i] == -1)
// 			pipex_error(FORK_ERR, m, NULL);
// 		else if (pid[i] == 0)
// 			child_process(i, fd, m, envp);
// 	}
// 	parent_process(fd, pid, m);
// }

// int	pipex(t_mlist *m, char **envp)
// {
// 	int	fd[m->num_cmds - 1][2]; 
// 	int	pid[m->num_cmds];
// 	int	i;
// 	int	status;

// 	if (dup2(m->file1, STDIN_FILENO) == -1)
// 		pipex_error(DUP_ERR, m, NULL);
// 	if (close(m->file1) == -1)
// 		pipex_error(CLOSE_ERR, m, NULL);
// 	i = -1;
// 	while (++i < m->num_cmds - 1)
// 		if (pipe(fd[i]) == -1)
// 			pipex_error(PIPE_ERR, m, NULL);
// 	i = -1;
// 	while (++i < m->num_cmds)
// 	{
// 		pid[i] = fork();
// 		if (pid[i] == -1)
// 			pipex_error(FORK_ERR, m, NULL);
// 		else if (pid[i] == 0)
// 			child_process(i, fd, m, envp);
// 	}
// 	status = parent_process(fd, pid, m);
// 	return (status);
// }

void	print_file(int fd);
void	print_mlist(t_mlist *m);
void	print_splitlist(char **list);

# note: in linux, cc objs libs flags -o name
# in mac, cc libs flags objs -o name